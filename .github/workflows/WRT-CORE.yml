#云编译公用核心 - 优化缓存版本
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: true
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_SOURCE: ${{inputs.WRT_SOURCE}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          sudo mkdir -p /mnt/build_wrt
          sudo chown $USER:$USER /mnt/build_wrt
          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Initialization Values
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=${GITHUB_REPOSITORY%%/*}" >> $GITHUB_ENV
          echo "WRT_INFO=${WRT_SOURCE%%/*}" >> $GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/$WRT_CONFIG.txt)" >> $GITHUB_ENV
          echo "WRT_KVER=none" >> $GITHUB_ENV
          echo "WRT_LIST=none" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

          # GitHub Action 移除国内下载源
          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      # 优化1: 拆分缓存，提高命中率
      - name: Cache Toolchain
        id: cache-toolchain
        if: env.WRT_TEST != 'true'
        uses: actions/cache@v4
        with:
          key: toolchain-${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_HASH}}
          restore-keys: |
            toolchain-${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-
            toolchain-${{env.WRT_CONFIG}}-
          path: |
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Cache CCCache
        id: cache-ccache
        if: env.WRT_TEST != 'true'
        uses: actions/cache@v4
        with:
          key: ccache-${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{github.run_number}}
          restore-keys: |
            ccache-${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-
            ccache-${{env.WRT_CONFIG}}-
          path: ./wrt/.ccache

      # 优化2: 新增下载包缓存
      - name: Cache Downloads
        id: cache-downloads
        if: env.WRT_TEST != 'true'
        uses: actions/cache@v4
        with:
          key: downloads-${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{hashFiles('./wrt/feeds.conf.default')}}
          restore-keys: |
            downloads-${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-
            downloads-${{env.WRT_CONFIG}}-
          path: ./wrt/dl

      # 优化3: 新增feeds缓存
      - name: Cache Feeds
        id: cache-feeds
        if: env.WRT_TEST != 'true'
        uses: actions/cache@v4
        with:
          key: feeds-${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{hashFiles('./wrt/feeds.conf.default')}}
          restore-keys: |
            feeds-${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-
            feeds-${{env.WRT_CONFIG}}-
          path: |
            ./wrt/feeds
            ./wrt/package/feeds

      - name: Update Caches
        if: env.WRT_TEST != 'true'
        run: |
          # 配置CCCache
          export CCACHE_DIR="$GITHUB_WORKSPACE/wrt/.ccache"
          export USE_CCACHE=1
          ccache -M 2G
          ccache -s

          if [ -d "./wrt/staging_dir" ]; then
            find "./wrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done

            mkdir -p ./wrt/tmp && echo "1" > ./wrt/tmp/.build
            echo "toolchain cache restored!"
          else
            echo "toolchain cache missed!"
          fi

          # 清理旧缓存的逻辑保持不变，但只针对旧的组合缓存
          if ${{steps.cache-toolchain.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key "toolchain-$WRT_CONFIG-$WRT_INFO" | cut -f 1 | head -5)
            for CACHE_KEY in $CACHE_LIST; do
              gh cache delete $CACHE_KEY || true
            done
            echo "old toolchain caches cleaned!"
          fi

      - name: Update Feeds
        run: |
          cd ./wrt/

          # 如果feeds缓存命中，跳过更新
          if [ "${{steps.cache-feeds.outputs.cache-hit}}" = "true" ]; then
            echo "feeds cache hit, skipping update"
          else
            ./scripts/feeds update -a
            ./scripts/feeds install -a
          fi

      - name: Custom Packages
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          cd ./wrt/

          # 启用CCCache
          export CCACHE_DIR="$GITHUB_WORKSPACE/wrt/.ccache"
          export USE_CCACHE=1

          if [[ "${WRT_CONFIG,,}" == *"test"* ]]; then
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt >> .config
          else
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt $GITHUB_WORKSPACE/Config/GENERAL.txt >> .config
          fi

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig -j$(nproc) && make clean -j$(nproc)

      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          # 启用CCCache
          export CCACHE_DIR="$GITHUB_WORKSPACE/wrt/.ccache"
          export USE_CCACHE=1

          make -j$(nproc) || make -j$(nproc) V=s

          # 显示CCCache统计
          ccache -s

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="
          
          # 显示缓存使用情况
          if [ -d ".ccache" ]; then
            echo "CCCache Statistics:"
            export CCACHE_DIR="$GITHUB_WORKSPACE/wrt/.ccache"
            ccache -s
            echo "======================="
          fi

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config-"$WRT_CONFIG"-"$WRT_INFO"-"$WRT_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >> $GITHUB_ENV
            echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >> $GITHUB_ENV

            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +

            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="$WRT_INFO"-"$NAME"-"$WRT_DATE"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

            make clean -j$(nproc)
          fi

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！

            全系带开源硬件加速，别问了！

            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            提交：${{env.WRT_HASH}}

            配置：${{env.WRT_CONFIG}}
            平台：${{env.WRT_TARGET}}

            登录地址：${{env.WRT_IP}}
            登录密码：${{env.WRT_PW}}

            WIFI名称：${{env.WRT_SSID}}
            WIFI密码：${{env.WRT_WORD}}

            内核版本：${{env.WRT_KVER}}
            插件列表：${{env.WRT_LIST}}
